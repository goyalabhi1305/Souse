"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.allowFalseValue = allowFalseValue;
exports.assertAscending = assertAscending;
exports.assertStartAtZero = assertStartAtZero;
exports.comparable = comparable;
exports.default = void 0;

var _unitUtils = _interopRequireDefault(require("@bootstrap-styled/utils/lib/unitUtils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Helper used to keep false values provided by userTheme
 * @param userValue
 * @param defaultValue
 * @returns {*}
 */
function allowFalseValue(userValue, defaultValue) {
  return userValue === false ? userValue : userValue || defaultValue;
}

function assertAscending(map, mapName) {
  var prevKey;
  var prevNum;
  var asserted = true;
  Object.keys(map).forEach(function (key) {
    var num = map[key];

    if (prevNum == null) {// do nothing
    } else if (!comparable(_unitUtils.default.rmUnit(prevNum), _unitUtils.default.rmUnit(num))) {
      /* istanbul ignore if */
      if (process.env.NODE !== 'test') {
        console.warn("Potentially invalid value for ".concat(mapName, ": This map must be in ascending order, but key '").concat(key, "' has value ").concat(num, " whose unit makes it incomparable to ").concat(prevNum, ", the value of the previous key '").concat(prevKey, "' !")); // eslint-disable-line no-console
      }

      asserted = false;
    } else if (_unitUtils.default.rmUnit(prevNum) >= _unitUtils.default.rmUnit(num)) {
      /* istanbul ignore if */
      if (process.env.NODE !== 'test') {
        console.warn("Invalid value for ".concat(mapName, ": This map must be in ascending order, but key '").concat(key, "' has value ").concat(num, " which isn't greater than ").concat(prevNum, ", the value of the previous key '").concat(prevKey, "' !")); // eslint-disable-line no-console
      }

      asserted = false;
    }

    prevKey = key;
    prevNum = num;
  });
  return asserted;
}

function assertStartAtZero(map) {
  var values = Object.keys(map).map(function (key) {
    return map[key];
  });

  var firstValue = _unitUtils.default.rmUnit(values[0]);

  var asserted = true;

  if (firstValue !== 0) {
    if (process.env.NODE !== 'test') {
      console.warn("First breakpoint in $grid-breakpoints must start at 0, but starts at ".concat(firstValue, ".")); // eslint-disable-line no-console
    }

    asserted = false;
  }

  return asserted;
}

function comparable(a, b) {
  return !isNaN(a + b); // eslint-disable-line no-restricted-globals
}

var _default = {
  assertAscending: assertAscending,
  assertStartAtZero: assertStartAtZero,
  comparable: comparable
};
exports.default = _default;