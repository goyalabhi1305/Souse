"use strict";

var _react = _interopRequireDefault(require("react"));

var _enzyme = require("enzyme");

var _BootstrapProvider = _interopRequireDefault(require("@bootstrap-styled/provider/lib/BootstrapProvider"));

var _theme = require("@bootstrap-styled/documentation/lib/theme");

var _withWidth = _interopRequireWildcard(require("../withWidth"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var breakpoints = {
  xs: '0',
  sm: '576px',
  md: '768px',
  lg: '992px',
  xl: '1200px',
  xxl: '1452px'
};

var mount = function mount(children) {
  return (0, _enzyme.mount)(_react.default.createElement(_BootstrapProvider.default, {
    theme: (0, _theme.makeTheme)({
      '$grid-breakpoints': breakpoints
    })
  }, children));
};

var Empty = function Empty() {
  return _react.default.createElement("div", null);
};

var EmptyWithWidth = (0, _withWidth.default)()(Empty);
describe('withWidth', function () {
  describe('prop: width', function () {
    it('should be able to override it', function () {
      var wrapper = mount(_react.default.createElement(EmptyWithWidth, {
        width: "xl"
      }));
      expect(wrapper.find(Empty).props().width).toEqual('xl');
    });
  });
  describe('isWidthUp', function () {
    it('should work as default inclusive', function () {
      expect((0, _withWidth.isWidthUp)(breakpoints, 'md', 'lg')).toEqual(true); // should accept larger size

      expect((0, _withWidth.isWidthUp)(breakpoints, 'md', 'md')).toEqual(true); // should be inclusive

      expect((0, _withWidth.isWidthUp)(breakpoints, 'md', 'sm')).toEqual(false); // should reject smaller size
    });
    it('should work as exclusive', function () {
      expect((0, _withWidth.isWidthUp)(breakpoints, 'md', 'lg', false)).toEqual(true); // should accept larger size

      expect((0, _withWidth.isWidthUp)(breakpoints, 'md', 'md', false)).toEqual(false); // should be exclusive

      expect((0, _withWidth.isWidthUp)(breakpoints, 'md', 'sm', false)).toEqual(false); // should reject smaller size
    });
  });
  describe('isWidthDown', function () {
    it('should work as default inclusive', function () {
      expect((0, _withWidth.isWidthDown)(breakpoints, 'md', 'lg', true)).toEqual(false); // should reject larger size

      expect((0, _withWidth.isWidthDown)(breakpoints, 'md', 'md', true)).toEqual(true); // should be inclusive

      expect((0, _withWidth.isWidthDown)(breakpoints, 'md', 'sm', true)).toEqual(true); // should accept smaller size
    });
    it('should work as exclusive', function () {
      expect((0, _withWidth.isWidthDown)(breakpoints, 'md', 'lg', false)).toEqual(false); //  should reject larger size

      expect((0, _withWidth.isWidthDown)(breakpoints, 'md', 'md', false)).toEqual(false); // should be exclusive

      expect((0, _withWidth.isWidthDown)(breakpoints, 'md', 'sm', false)).toEqual(true); // should accept smaller size
    });
  });
});